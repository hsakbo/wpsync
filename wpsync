#! /bin/sh

perror() {
    echo $1 1>&2 && exit $2
}

exprq() {
  local value

  test "$2" = ":" && value="$3" || value="$2"
  expr "$1" : "$value" 1>/dev/null
}

parse_line() {
    local tmp_ifs=$IFS
    IFS=","
    local line=`echo $1 | sed s/#.*$//g`
    for vars in $2; do
	if [ "$vars" = "" ]; then
	    continue
	fi
	lval=$(echo "$vars" | awk -F= '{print $1}')
	rval=$(echo "$vars" | sed s/^[^\']*=// )
	line=`echo "$line" | sed s\|\$"$lval"\|"$rval"\|g`
    done
    IFS=$tmp_ifs
    PARSED_LINE=$line
}

handle_sync() {
    local line=$(($2+1))
    tmp_ifs=$IFS
    IFS=","
    for hItem in $1; do
    	lval=$(echo "$hItem" | awk -F= '{print $1}')
	rval=$(echo "$hItem" | sed s/^[^\']*=// | sed s/\'//g )
	if [ -z "$lval" ]; then
	    continue
	fi
	case $lval in
	    FROM)
		local from=$rval/
		;;
	    TO)
		local to=$rval
		;;
	    EXCLUDE)
		if [ "$rval" != "" ]; then
		    exclude="--exclude $rval $exclude"
		fi		
		;;
	    PORT)
		local port="ssh -p $rval"
		;;
	    DRY)
		local dry="--dry-run"
		;;
	    PASSWORD)
		local pass=$rval
		;;
	    *)
		perror "Error: unknown attribute \"$lval\" in line: $line" 5
		;;
	esac
    done
    IFS=$DEFAULT_IFS #this is because parameters aren't fed properly without default delimiter
    
    if [ -z ${from+x} ] || [ -z ${to+x} ] || [ "$from" = "" ] || [ "$to" = "" ]; then
	perror "Error: not provided from/to in line: $line" 6
    fi
    
    rsync --progress -av ${port:+-e "$port"} $dry $exclude "$from" "$to"
    
    dry=
    port=
    from=
    to=
    exclude=
    IFS=$tmp_ifs #newline delimiter to continue with parsing
}

handle_db() {
    local line=$(($2+1))
    tmp_ifs=$IFS
    IFS=","
    for hItems in $1; do
	if [ ! "$hItems" ]; then
	    continue
	fi
	local lval=`echo $hItems | awk -F= '{print $1}'`
	local rval=`echo $hItems | sed s/^[^\']*=// | sed s/\'//g`
	case $lval in
	    FROM)
		if exprq "$rval" "^[^:@]*$"; then
		    local from_user="-uroot"
		    local from_db="$rval"
		elif exprq "$rval" "^.*@.*:.*$"; then
		    local from_user="-u`echo $rval | sed s/@.*$//`"
		    local from_host="-h `echo $rval | sed s/^.*@// | sed s/:.*$//`"
		    local from_db=`echo $rval | sed s/.*://`
		else
		    perror "Error: syntax error under line: $2 (from clause)
examples of usage --> root@localhost:dbname, sflash@192.168.10.107, dbname" 8
		fi
		;;
	    TO)
		if exprq "$rval" "^[^:@]*$"; then
		    local to_user="-uroot"
		    local to_db="$rval"
		elif exprq "$rval" "^.*@.*:.*$"; then
		    local to_user="-u`echo $rval | sed s/@.*$//`"
		    local to_host="-h `echo $rval | sed s/^.*@// | sed s/:.*$//`"
		    local to_db=`echo $rval | sed s/.*://`
		else
		    perror "Error: syntax error under line: $2 (to clause)
examples of usage --> root@localhost:dbname, sflash@192.168.10.107, dbname" 9
		fi
		;;
	    FROM_PASSWORD)
		local from_pass="$rval"
		;;
	    TO_PASSWORD)
		local to_pass="$rval"
		;;
	    BACKUP)
		local backup="$rval"
		;;
	    TABLE)
		local table="$table --tables $rval"
		;;
	    WORKDIR)
		local workdir="$rval"
		;;
	    DUMP_EXTRA)
		local dump_extra="$dump_extra $rval"
		;;
	    MYSQL_EXTRA)
		local mysql_extra="$mysql_extra $rval"
		;;
	    *)
		perror "Error: unknown attribute \"$lval\" in line: $line" 10
	esac
    done

    IFS=$DEFAULT_IFS
    mysqldump $dump_extra "$from_user" $from_host -p"$from_pass" "$from_db" $table > ${workdir:="$DIR"}/tmp.sql

    if [ "$backup" ]; then
    	mysqldump $dump_extra "$to_user" $to_host -p"$to_pass" "$to_db" > "$backup"/"$to_db"_$(date '+%Y-%m-%d_%T').sql
    fi

    mysql $mysql_extra "$to_user" $to_host -p"$to_pass" "$to_db" < ${workdir:="$DIR"}/tmp.sql
    
    rm ${workdir:="$DIR"}/tmp.sql
 
    from_user=
    from_host=
    from_pass=
    from_db=
    table=
    to_user=
    to_host=
    to_pass=
    to_db=
    backup=
    workdir=
    dump_extra=
    mysql_extra=
    IFS=$tmp_ifs
}

inner_loop() {
    PARAM=
    inner_loop=0
    while read -r inner_param; do
	parse_line "$inner_param" "$VARIABLES"
	inner_param=$PARSED_LINE
	if [ $inner_loop -le $shifted ]; then
	    inner_loop=$(($inner_loop+1))
	    continue
	elif [ "$inner_param" = "$1" ]; then
	    inner_loop=$(($inner_loop+1))
	    break
	fi
	PARAM="$PARAM,$inner_param"
	inner_loop=$(($inner_loop+1))
    done < "$bcon"
}

update_var() {
    local lval=`echo $1 | awk -F= '{print $1}'`
    local rval=`echo $1 | sed s/^[^\']*=//`
    if exprq "$VARIABLES" "$lval=*," ; then
	VARIABLES=`echo "$VARIABLES" | sed s/"$lval=.*,"/"$lval=$rval,"/`
    else
	VARIABLES="$1","$VARIABLES"
    fi
    #echo $VARIABLES
}

DIR="$(dirname $0)"
bcon="$DIR/.bconfig"
if [ ! -f $bcon ]; then
    perror "error: bconfig file does not exist" 3
fi

### logic for getting attributes inside [SYNC] tags
VARIABLES=
shifted=0
DEFAULT_IFS=$IFS
IFS='
'
while read -r item; do
    parse_line "$item" "$VARIABLES"
    item=$PARSED_LINE
    if [ "$item" = '[SYNC]' ]; then
        inner_loop "[/SYNC]"
	handle_sync $PARAM $shifted

    elif [ "$item" = '[DATABASE]' ]; then
        inner_loop "[/DATABASE]"
	handle_db $PARAM $shifted

    elif exprq "$item" "^[a-zA-Z_0-9]*=*"; then
        update_var "$item"	
    fi
    shifted=$(($shifted+1))
done < "$bcon"
### end logic for getting attributes inside [SYNC] tags

#date "+%Y-%m-%d_%T"

##bug: sed will replace = parameters inside '' when reassigned and has the same name. (194-update var if statement)
